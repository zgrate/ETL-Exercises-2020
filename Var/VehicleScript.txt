 #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    public override void PreExecute()
    {
        base.PreExecute();
        string[] split = vehicleType.Split('$');
        foreach (var s in split)
        {
            var split2 = s.Split(',');
            vehicleTypeDict.Add(int.Parse(split2[0]), split2[1]);
        }
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */

    }

    private string EngineCapacity(int capacity)
    {
        if (capacity == -1)
        {
            return "Data missing";
        }
        else if (capacity < 500)
        {
            return "<500";
        }
        else if (capacity < 1000)
        {
            return "<1000";
        }
        else if (capacity < 1500)
        {
            return "<1500";
        }
        else if (capacity < 2000)
        {
            return "<2000";
        }
        else if (capacity < 3000)
        {
            return "<3000";
        }
        else if (capacity < 4000)
        {
            return "<4000";
        }
        else if (capacity < 5000)
        {
            return "<5000";
        }
        else if (capacity < 6000)
        {
            return "<6000";
        }
        else if (capacity < 8000)
        {
            return "<8000";
        }
        else if (capacity < 10000)
        {
            return "<10000";
        }
        else if (capacity < 12000)
        {
            return "<12000";
        }
        else if (capacity < 14000)
        {
            return "<14000";
        }
        else if (capacity < 16000)
        {
            return "<16000";
        }
        else
        {
            return ">16000";
        }
    }


    string vehicleType = "0,Pedestrian$1,Cyclist$2,Motorcycle 50cc and under rider or passenger$3,Motorcycle 125cc and under rider or passenger$4,Motorcycle over 125cc and up to 500cc rider or  passenger$5,Motorcycle over 500cc rider or passenger$8,Taxi/Private hire car occupant$9,Car occupant$10,Minibus (8 - 16 passenger seats) occupant$11,Bus or coach occupant (17 or more pass seats)$16,Horse rider$17,Agricultural vehicle occupant$18,Tram occupant$19,Van / Goods vehicle (3.5 tonnes mgw or under) occupant$20,Goods vehicle (over 3.5t. and under 7.5t.) occupant$21,Goods vehicle (7.5 tonnes mgw and over) occupant$22,Mobility scooter rider$23,Electric motorcycle rider or passenger$90,Other vehicle occupant$97,Motorcycle - unknown cc rider or passenger$98,Goods vehicle (unknown weight) occupant$99,Unknown vehicle type (self rep only)$103,Motorcycle - Scooter (1979-1998)$104,Motorcycle (1979-1998)$105,Motorcycle - Combination (1979-1998)$106,Motorcycle over 125cc (1999-2004)$108,Taxi (excluding private hire cars) (1979-2004)$109,Car (including private hire cars) (1979-2004)$110,Minibus/Motor caravan (1979-1998)$113,Goods over 3.5 tonnes (1979-1998)";
    Dictionary<int, string> vehicleTypeDict = new Dictionary<int, string>();
    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        Row.MEngine = EngineCapacity(int.Parse(Row.EngineCapacityCC));
        Row.MType = vehicleTypeDict[int.Parse(Row.VehicleType)];
        Row.MLeft = SteeringWheel(int.Parse(Row.WasVehicleLeftHandDrive));

    }


    private string SteeringWheel(int option)
    {
        /**
         * 1	No
2	Yes
9	Unknown
-1	Data missing or out of range

         */
        switch (option)
        {
            case 1: return "Right";
            case 2: return "Left";
            case 9: return "Unknown";
            default: return "Data missing";
        }
    }
