#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion


    
    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        Row.MLightCondition = LightCondition(int.Parse(Row.LightCondition));
        Row.MFirstRoadClass = RoadClass(int.Parse(Row.FirstRoadClass));
        Row.MSecondRoadClass = RoadClass(int.Parse(Row.SecondRoadClass));
        Row.MRoadSurfaceCondition = RoadSurfaceCondition(int.Parse(Row.RoadSurfaceCondition));
        Row.MRoadType = RoadType(int.Parse(Row.RoadType));
        Row.MSpecialConditionAtSite = SpecialCondition(int.Parse(Row.SpecialConditionAtSite));
        Row.MUrbanRuralArea = UrbanRural(int.Parse(Row.UrbanRuralArea));
        Row.MWeatherCondition = WeatherCondition(int.Parse(Row.WeatherCondition));
    }

    private string UrbanRural(int type)
    {
        switch (type)
        {
            case 1: return "Urban";
            case 2: return "Rural";
            case 3: return "Unallocated";
            default: return "Data missing";
        }
    }

    private string WeatherCondition(int condition)
    {
        /**
         * 1	Fine no high winds
2	Raining no high winds
3	Snowing no high winds
4	Fine + high winds
5	Raining + high winds
6	Snowing + high winds
7	Fog or mist
8	Other
9	Unknown
-1	Data missing or out of range

         **/

        switch (condition)
        {
            case 1: return "Fine no high winds";
            case 2: return "Raining no high winds";
            case 3: return "Snowing no high winds";
            case 4: return "Fine + high winds";
            case 5: return "Raining + high winds";
            case 6: return "Snowing + high winds";
            case 7: return "Fog or mist";
            case 8: return "Other";
            case 9: return "Unknown";
            default: return "Data missing";
        }
    }

    private string RoadSurfaceCondition(int condition)
    {
        switch (condition)
        {
            case 1: return "Dry";
            case 2: return "Wet or damp";
            case 3: return "Snow";
            case 4: return "Frost or ice";
            case 5: return "Flood over 3cm. deep";
            case 6: return "Oil or diesel";
            case 7: return "Mud";
            case 9: return "Unknown";
            default: return "Data missing";
        }
    }

    private string SpecialCondition(int condition)
    {
        switch (condition)
        {
            case 0: return "None";
            case 1: return "Auto traffic signal - out";
            case 2: return "Auto signal part defective";
            case 3: return "Road sign or marking defective or obscured";
            case 4: return "Roadworks";
            case 5: return "Road surface defective";
            case 6: return "Oil or diesel";
            case 7: return "Mud";
            case 9: return "Unknown";
            default: return "Data missing";
        }
    }

    private string RoadType(int type)
    {
        switch (type)
        {
            case 1: return "Roundabout";
            case 2: return "One way street";
            case 3: return "Dual carriageway";
            case 6: return "Single carriageway";
            case 7: return "Slip road";
            case 9: return "Unknown";
            case 12: return "One way street/Slip road";
            default: return "Data missing";
        }
    }


    private string RoadClass(int road)
    {
        switch (road)
        {
            case 1: return "Motorway";
            case 2: return "A(M)";
            case 3: return "A";
            case 4: return "B";
            case 5: return "C";
            case 6: return "Unclassified";
            default: return "No Road";
        }
    }


    private string LightCondition(int lightCondition)
    {
        switch (lightCondition)
        {
            case 1: return "Daylight";
            case 4: return "Darkness - lights lit";
            case 5: return "Darkness - lights unlit";
            case 6: return "Darkness - no lighting";
            case 7: return "Darkness - lighting unknown";
            default: return "Data missing";
        }
    }

}
